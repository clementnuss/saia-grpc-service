# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from saia.v1 import saia_pb2 as saia_dot_v1_dot_saia__pb2


class SaiaPcdServiceStub(object):
    """Service definition for SAIA PCD controller access
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadInput = channel.unary_unary(
                '/saia.v1.SaiaPcdService/ReadInput',
                request_serializer=saia_dot_v1_dot_saia__pb2.ReadInputRequest.SerializeToString,
                response_deserializer=saia_dot_v1_dot_saia__pb2.ReadInputResponse.FromString,
                _registered_method=True)
        self.ReadOutput = channel.unary_unary(
                '/saia.v1.SaiaPcdService/ReadOutput',
                request_serializer=saia_dot_v1_dot_saia__pb2.ReadOutputRequest.SerializeToString,
                response_deserializer=saia_dot_v1_dot_saia__pb2.ReadOutputResponse.FromString,
                _registered_method=True)
        self.ReadFlag = channel.unary_unary(
                '/saia.v1.SaiaPcdService/ReadFlag',
                request_serializer=saia_dot_v1_dot_saia__pb2.ReadFlagRequest.SerializeToString,
                response_deserializer=saia_dot_v1_dot_saia__pb2.ReadFlagResponse.FromString,
                _registered_method=True)
        self.ReadCounter = channel.unary_unary(
                '/saia.v1.SaiaPcdService/ReadCounter',
                request_serializer=saia_dot_v1_dot_saia__pb2.ReadCounterRequest.SerializeToString,
                response_deserializer=saia_dot_v1_dot_saia__pb2.ReadCounterResponse.FromString,
                _registered_method=True)
        self.ReadTimer = channel.unary_unary(
                '/saia.v1.SaiaPcdService/ReadTimer',
                request_serializer=saia_dot_v1_dot_saia__pb2.ReadTimerRequest.SerializeToString,
                response_deserializer=saia_dot_v1_dot_saia__pb2.ReadTimerResponse.FromString,
                _registered_method=True)
        self.ReadRegister = channel.unary_unary(
                '/saia.v1.SaiaPcdService/ReadRegister',
                request_serializer=saia_dot_v1_dot_saia__pb2.ReadRegisterRequest.SerializeToString,
                response_deserializer=saia_dot_v1_dot_saia__pb2.ReadRegisterResponse.FromString,
                _registered_method=True)
        self.WriteFlag = channel.unary_unary(
                '/saia.v1.SaiaPcdService/WriteFlag',
                request_serializer=saia_dot_v1_dot_saia__pb2.WriteFlagRequest.SerializeToString,
                response_deserializer=saia_dot_v1_dot_saia__pb2.WriteFlagResponse.FromString,
                _registered_method=True)
        self.WriteRegister = channel.unary_unary(
                '/saia.v1.SaiaPcdService/WriteRegister',
                request_serializer=saia_dot_v1_dot_saia__pb2.WriteRegisterRequest.SerializeToString,
                response_deserializer=saia_dot_v1_dot_saia__pb2.WriteRegisterResponse.FromString,
                _registered_method=True)


class SaiaPcdServiceServicer(object):
    """Service definition for SAIA PCD controller access
    """

    def ReadInput(self, request, context):
        """Read operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadCounter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadTimer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteFlag(self, request, context):
        """Write operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SaiaPcdServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadInput': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadInput,
                    request_deserializer=saia_dot_v1_dot_saia__pb2.ReadInputRequest.FromString,
                    response_serializer=saia_dot_v1_dot_saia__pb2.ReadInputResponse.SerializeToString,
            ),
            'ReadOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadOutput,
                    request_deserializer=saia_dot_v1_dot_saia__pb2.ReadOutputRequest.FromString,
                    response_serializer=saia_dot_v1_dot_saia__pb2.ReadOutputResponse.SerializeToString,
            ),
            'ReadFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadFlag,
                    request_deserializer=saia_dot_v1_dot_saia__pb2.ReadFlagRequest.FromString,
                    response_serializer=saia_dot_v1_dot_saia__pb2.ReadFlagResponse.SerializeToString,
            ),
            'ReadCounter': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadCounter,
                    request_deserializer=saia_dot_v1_dot_saia__pb2.ReadCounterRequest.FromString,
                    response_serializer=saia_dot_v1_dot_saia__pb2.ReadCounterResponse.SerializeToString,
            ),
            'ReadTimer': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadTimer,
                    request_deserializer=saia_dot_v1_dot_saia__pb2.ReadTimerRequest.FromString,
                    response_serializer=saia_dot_v1_dot_saia__pb2.ReadTimerResponse.SerializeToString,
            ),
            'ReadRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRegister,
                    request_deserializer=saia_dot_v1_dot_saia__pb2.ReadRegisterRequest.FromString,
                    response_serializer=saia_dot_v1_dot_saia__pb2.ReadRegisterResponse.SerializeToString,
            ),
            'WriteFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteFlag,
                    request_deserializer=saia_dot_v1_dot_saia__pb2.WriteFlagRequest.FromString,
                    response_serializer=saia_dot_v1_dot_saia__pb2.WriteFlagResponse.SerializeToString,
            ),
            'WriteRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteRegister,
                    request_deserializer=saia_dot_v1_dot_saia__pb2.WriteRegisterRequest.FromString,
                    response_serializer=saia_dot_v1_dot_saia__pb2.WriteRegisterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'saia.v1.SaiaPcdService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('saia.v1.SaiaPcdService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SaiaPcdService(object):
    """Service definition for SAIA PCD controller access
    """

    @staticmethod
    def ReadInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/saia.v1.SaiaPcdService/ReadInput',
            saia_dot_v1_dot_saia__pb2.ReadInputRequest.SerializeToString,
            saia_dot_v1_dot_saia__pb2.ReadInputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/saia.v1.SaiaPcdService/ReadOutput',
            saia_dot_v1_dot_saia__pb2.ReadOutputRequest.SerializeToString,
            saia_dot_v1_dot_saia__pb2.ReadOutputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/saia.v1.SaiaPcdService/ReadFlag',
            saia_dot_v1_dot_saia__pb2.ReadFlagRequest.SerializeToString,
            saia_dot_v1_dot_saia__pb2.ReadFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadCounter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/saia.v1.SaiaPcdService/ReadCounter',
            saia_dot_v1_dot_saia__pb2.ReadCounterRequest.SerializeToString,
            saia_dot_v1_dot_saia__pb2.ReadCounterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadTimer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/saia.v1.SaiaPcdService/ReadTimer',
            saia_dot_v1_dot_saia__pb2.ReadTimerRequest.SerializeToString,
            saia_dot_v1_dot_saia__pb2.ReadTimerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/saia.v1.SaiaPcdService/ReadRegister',
            saia_dot_v1_dot_saia__pb2.ReadRegisterRequest.SerializeToString,
            saia_dot_v1_dot_saia__pb2.ReadRegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/saia.v1.SaiaPcdService/WriteFlag',
            saia_dot_v1_dot_saia__pb2.WriteFlagRequest.SerializeToString,
            saia_dot_v1_dot_saia__pb2.WriteFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/saia.v1.SaiaPcdService/WriteRegister',
            saia_dot_v1_dot_saia__pb2.WriteRegisterRequest.SerializeToString,
            saia_dot_v1_dot_saia__pb2.WriteRegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
